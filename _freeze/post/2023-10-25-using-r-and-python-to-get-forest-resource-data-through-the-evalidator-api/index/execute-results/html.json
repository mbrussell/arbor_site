{
  "hash": "d989d6b2b190d4e8fd54abc078c15f9e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Using R and Python to get forest resource data through the EVALIDator API\ndescription: \"New ways to access FIA estimates through R and Python.\"\nauthor: Matt Russell\ndate: '2023-10-25'\nslug: []\ncategories:\n  - Analytics\ntags:\n  - forest inventory\n  - forest inventory and analysis\n  - EVALIDator\n  - analytics\nimage: example_evalid.png\n---\n\n\n# \n\n![](example_evalid.png){width=500px}\n</center>\n#  \nIf you work with forestry data across the United States, you've probably had to turn to Forest Inventory and Analysis (FIA) data at one time or another to look at the status and trends in our forest resources. The FIA database has information contained from over 130,000 forest inventory plots across the country. \n\nOne of the tools that analysts often use to access FIA data is the  [the EVALIDator web interface](https://apps.fs.usda.gov/fiadb-api/evalidator). EVALIDator is a web-based Application Programming Interface (API) that generates population estimates for core forestry metrics. It provides the ability to query FIA information at the state level or a circular retrieval of information around a fixed geographic point.\n\nThere was [an excellent webinar offered in August](https://vimeo.com/861362270/4d996ee479?share=copy) hosted by the FIA National User Group that highlighted some new features available through EVALIDator. For a long while, analysts have used it's web interface to point and click their way to estimating forest resources after selecting the forestry metrics and geographic scale they're interested in. As a long-time EVALIDator user, this was a great way to access FIA data. But dealing with the output in an HTML format and getting it into different software to analyze was always an additional step.\n\nI was happy to learn in the webinar about new ways to directly access FIA estimates through R and Python using the EVALIDator API. For me, this can save time and effort given most of my analyses, graphing, and reporting are done through R. \n\nAll of the documentation for these steps can be found in the [FIADB-API & EVALIDator user documentation](https://apps.fs.usda.gov/fiadb-api/). I'll go through a few examples where I access data from the state of Maine.\n\n## Using R to access FIA data at the state level\n  \nThis first example will access the total amount of carbon stored in the live aboveground portions of trees growing on forestland in Maine, measured in metric tonnes. I'll ask for estimates to be provided by forest type group and ownership.\n\nFirst, I'll use R and will load a few packages to access the data: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(rlist)\nlibrary(knitr)\n```\n:::\n\n\nIf you look at the bottom of the [documentation webpage](https://apps.fs.usda.gov/fiadb-api/), you'll see example use cases for extracting FIA estimates using R and Python. There are two examples for each that use GET and POST scripts. The GET scripts allow you to enter a complete URL if you know the attributes you're interested in. The POST script, which I copy here with the `fiadb_api_POST()` function, allows you to directly input the variables you're interested in in R: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fiadb_api_POST() will accept a FIADB-API full report URL and return data frames\n# See descriptor: https://apps.fs.usda.gov/fiadb-api/\n\nfiadb_api_POST <- function(argList){\n  # make request\n  resp <- POST(url = \"https://apps.fs.usda.gov/fiadb-api/fullreport\", \n               body = argList, \n               encode = \"form\")\n  # parse response from JSON to R list\n  respObj <- content(resp, \"parsed\", encoding = \"ISO-8859-1\")\n  # create empty output list\n  outputList <- list()\n  # add estimates data frame to output list\n  outputList[['estimates']] <- as.data.frame(do.call(rbind,respObj$estimates))\n\n  # if estimate includes totals and subtotals, add those data frames to output list\n  if ('subtotals' %in% names(respObj)){\n    subtotals <- list()\n    # one subtotal data frame for each grouping variable\n    for (i in names(respObj$subtotals)){\n      subtotals[[i]] <- as.data.frame(do.call(rbind,respObj$subtotals[[i]]))\n    }\n    outputList[['subtotals']] <- subtotals\n\n    # totals data frame\n    outputList[['totals']] <- as.data.frame(do.call(rbind,respObj$totals))\n  }\n\n  # add estimate metadata\n  outputList[['metadata']] <- respObj$metadata\n\n  return(outputList)\n}\n```\n:::\n\n\nThe first item to know before accessing FIA data is [the numeric code](https://apps.fs.usda.gov/fiadb-api/fullreport/parameters/snum) corresponding to the variable you're interested in. In my case, this is `snum = 98`, corresponding to the variable that represents \"Forest carbon pool 1: live aboveground, in metric tonnes, on forest land.\" A note of caution: there are *thousands* of variables to choose from, but I suspect the most popular ones are listed toward the top of the page.\n\nThe second item to know is which **wc** code you're interested in. I have no idea why it's abbreviated \"wc\", but it connects the state FIPS code with the 4-digit FIA inventory year. For example, I'm interested in `wc = 232021` to obtain data from Maine's (FIPS code 23) most recent inventory, collected in 2021. You could go back to inventories collected decades ago if you were interested in looking at trends, and [those codes are described here](https://apps.fs.usda.gov/fiadb-api/fullreport/parameters/wc).\n\nFinally, you can use the `rselected` and `cselected` statements to identify the variables you'd like to group by in rows and columns. In our case this is forest type group and ownership group. I'll obtain the data in an NJSON format, but you can also obtain the data in HTML, XML, or other formats. You can specify these parameters in `arg_list` and then store the data in a data frame called `all_rows`. I love how the data are presented in a long and \"tidy\" format:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\narg_list_maine <- list(snum = 98,\n               wc = 232021,\n               rselected = 'Forest type group', \n               cselected = 'Ownership group - Major',\n               outputFormat = 'NJSON')\n\n# submit list to POST request function\npost_data_maine <- fiadb_api_POST(arg_list_maine)\n\n# estimate data frame\nall_rows_maine <- post_data_maine[['estimates']]\n\nprint(all_rows_maine)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    ESTIMATE                                    GRP1          GRP2 PLOT_COUNT\n1    3904898 `0001 White \\\\/ red \\\\/ jack pine group  `0001 Public         22\n2   34789659 `0001 White \\\\/ red \\\\/ jack pine group `0002 Private        248\n3   14310434              `0002 Spruce \\\\/ fir group  `0001 Public        110\n4  105397247              `0002 Spruce \\\\/ fir group `0002 Private       1022\n5   62478.28 `0005 Loblolly \\\\/ shortleaf pine group `0002 Private          1\n6   200517.1            `0018 Exotic softwoods group  `0001 Public          1\n7     531124            `0018 Exotic softwoods group `0002 Private          5\n8   823381.8                `0020 Oak \\\\/ pine group  `0001 Public          5\n9   10607119                `0020 Oak \\\\/ pine group `0002 Private         73\n10  992844.6             `0021 Oak \\\\/ hickory group  `0001 Public          8\n11  11742364             `0021 Oak \\\\/ hickory group `0002 Private         85\n12  409060.3  `0023 Elm \\\\/ ash \\\\/ cottonwood group  `0001 Public          7\n13   6009873  `0023 Elm \\\\/ ash \\\\/ cottonwood group `0002 Private         85\n14  14742425   `0024 Maple \\\\/ beech \\\\/ birch group  `0001 Public        111\n15 136482887   `0024 Maple \\\\/ beech \\\\/ birch group `0002 Private       1244\n16   3260952             `0025 Aspen \\\\/ birch group  `0001 Public         28\n17  29091440             `0025 Aspen \\\\/ birch group `0002 Private        330\n18  5415.465             `0030 Other hardwoods group  `0001 Public          2\n19  734850.1             `0030 Other hardwoods group `0002 Private         26\n20  2668.444                        `0034 Nonstocked  `0001 Public          1\n21  56632.09                        `0034 Nonstocked `0002 Private         10\n         SE SE_PERCENT     VARIANCE\n1  989847.4   25.34887 979797935531\n2   2438499   7.009263 5.946276e+12\n3   1346913   9.412105 1.814175e+12\n4   3093327   2.934922 9.568672e+12\n5  69535.69   111.2958   4835212844\n6  197339.8   98.41544   3.8943e+10\n7  322121.4     60.649 103762218840\n8  383501.6    46.5764 147073471553\n9   1405489   13.25043 1.975398e+12\n10 376671.9   37.93866 141881751049\n11  1392492    11.8587 1.939034e+12\n12 210167.8    51.3782  44170517675\n13 792626.1   13.18873 628256055243\n14  1316485   8.929905 1.733132e+12\n15  3598018   2.636241 1.294574e+13\n16   719201   22.05494 517250138459\n17  1931424   6.639148 3.730397e+12\n18 4321.885   79.80635     18678690\n19 191250.2   26.02575  36576657832\n20 2380.922    89.2251      5668789\n21 31032.09   54.79594    962990504\n```\n\n\n:::\n:::\n\n\nThis makes the output easy to plot immediately. Here's a graph of the output, where you can see the vast amount of carbon stored on private land in Maine, mostly in the spruce/fir and maple/beech/birch forest type groups:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(all_rows_maine, aes(x = as.character(GRP2), \n                           y = as.numeric(ESTIMATE))) +\n  geom_bar(stat = \"identity\") +\n  facet_wrap(~as.character(GRP1)) +\n  labs(x = \"Ownership\",\n       y = \"Forest carbon (metric tonnes)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nNote you'll need to play with the names of variables a bit to tidy them up, e.g., turning \"`0001 Public\" to simply \"Public\". But the R functions allow you to quickly obtain the data of interest. You can also grab the subtotals of the output to sum all values within each forest type or ownership category:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubtotals_maine <- post_data_maine[['subtotals']]\n\nprint(subtotals_maine)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$GRP1\n    ESTIMATE                                    GRP1 PLOT_COUNT       SE\n1   38694556 `0001 White \\\\/ red \\\\/ jack pine group        269  2618535\n2  119707681              `0002 Spruce \\\\/ fir group       1127  3344993\n3   62478.28 `0005 Loblolly \\\\/ shortleaf pine group          1 69535.69\n4   731641.2            `0018 Exotic softwoods group          6 377174.6\n5   11430501                `0020 Oak \\\\/ pine group         78  1452201\n6   12735208             `0021 Oak \\\\/ hickory group         92  1432097\n7    6418933  `0023 Elm \\\\/ ash \\\\/ cottonwood group         92   815680\n8  151225312   `0024 Maple \\\\/ beech \\\\/ birch group       1348  3791540\n9   32352393             `0025 Aspen \\\\/ birch group        357  2057692\n10  740265.6             `0030 Other hardwoods group         28 191299.1\n11  59300.54                        `0034 Nonstocked         11 31123.29\n   SE_PERCENT     VARIANCE\n1    6.767193 6.856727e+12\n2    2.794301 1.118898e+13\n3    111.2958   4835212844\n4    51.55185 142260655272\n5    12.70461 2.108887e+12\n6    11.24518 2.050902e+12\n7    12.70741 665333890414\n8    2.507213 1.437578e+13\n9    6.360247 4.234097e+12\n10   25.84195  36595336521\n11     52.484    968659293\n\n$GRP2\n   ESTIMATE          GRP2 PLOT_COUNT      SE SE_PERCENT     VARIANCE\n1  38652597  `0001 Public        274 1659512   4.293404  2.75398e+12\n2 335505672 `0002 Private       2891 3373908   1.005619 1.138325e+13\n```\n\n\n:::\n:::\n\n\nFinally, you can grab the total number that sums all values. In this case, we learn that there's about 374 million metric tonnes of carbon stored in the live aboveground portions of trees in Maine forests:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotals_maine <- post_data_maine[['totals']]\nprint(totals_maine)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ESTIMATE PLOT_COUNT      SE SE_PERCENT     VARIANCE\n1 374158269       3143 3430416  0.9168357 1.176776e+13\n```\n\n\n:::\n:::\n\n\n## Using R to access FIA data around a fixed geographic point\n\nA favorite use of EVALIDator by many is the ability to query FIA data around a specific location. For example, a user can generate population estimates for a 50-mile radius around a proposed mill that uses wood.\n\nHere's an example that queries FIA data in a 25-mile radius surrounding Bangor, Maine. It estimates the total forestland area (`snum = 2`) by stand  age class in 20-year increments and stand size class (large-, medium-, or small-diameter trees). The latitude and longitude coordinates are specified in the function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narg_list_bangor <- list(lat = 44.809,\n                        lon = -68.771, \n                        radius = 25,\n                        wc = 232021,\n                        snum = 2,\n                        rselected = 'Stand-size class', \n                        cselected = 'Stand age 20 yr classes (0 to 100 plus)',\n                        outputFormat = 'NJSON')\n\n# submit list to POST request function\npost_data_bangor <- fiadb_api_POST(arg_list_bangor)\n\n# estimate data frame\nall_rows_bangor <- post_data_bangor[['estimates']]\n\nprint(all_rows_bangor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ESTIMATE                  GRP1               GRP2 PLOT_COUNT       SE\n1   14155.6  `0001 Large diameter  `0002 21-40 years          4 7338.611\n2  45473.05  `0001 Large diameter  `0003 41-60 years         10    15372\n3  90436.76  `0001 Large diameter  `0004 61-80 years         18 22385.23\n4    107109  `0001 Large diameter `0005 81-100 years         23 24368.78\n5  41243.83  `0001 Large diameter   `0006 100+ years          7  15696.3\n6  51611.41 `0002 Medium diameter  `0002 21-40 years         12 16379.57\n7  113830.6 `0002 Medium diameter  `0003 41-60 years         25 24352.08\n8  199754.6 `0002 Medium diameter  `0004 61-80 years         37 33455.07\n9  103521.8 `0002 Medium diameter `0005 81-100 years         21 24195.48\n10   5758.7 `0002 Medium diameter   `0006 100+ years          1 6011.665\n11  19655.8  `0003 Small diameter   `0001 0-20 years          4 10104.88\n12 90910.76  `0003 Small diameter  `0002 21-40 years         16 23393.71\n13    40205  `0003 Small diameter  `0003 41-60 years          7 15304.59\n14 13209.02  `0003 Small diameter  `0004 61-80 years          3 8759.869\n15 21404.85  `0003 Small diameter `0005 81-100 years          3  11056.3\n16 5305.999  `0003 Small diameter   `0006 100+ years          1 5045.363\n   SE_PERCENT   VARIANCE\n1    51.84246   53855209\n2    33.80465  236298512\n3    24.75236  501098555\n4    22.75138  593837455\n5    38.05733  246373784\n6    31.73633  268290228\n7    21.39326  593023809\n8    16.74808 1119241412\n9    23.37235  585421221\n10   104.3927   36140117\n11   51.40919  102108689\n12   25.73261  547265614\n13   38.06637  234230329\n14   66.31735   76735306\n15   51.65323  122241669\n16    95.0879   25455691\n```\n\n\n:::\n:::\n\n\nYou can plot these data directly to visualize the trends within the 25-mile radius:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(all_rows_bangor, aes(x = as.character(GRP2), \n                            y = as.numeric(ESTIMATE),\n                            fill = as.character(GRP1))) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Stand age\",\n       y = \"Forestland area (acres)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Conclusion\n\nThe new features available in the EVALIDator API that allow you to access data through R or Python can help to speed up data analysis using FIA data. You can access the entire history of FIA data and analyze forest resources data by state or a circular retrieval from a fixed geographic point. Special thanks to the USDA Forest Service staff that have made this available!  \n\n\n--\n\n*By Matt Russell. [Email Matt](mailto:matt@arbor-analytics.com) with any questions or comments.*",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}