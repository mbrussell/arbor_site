{"title":"Using R and Python to get forest resource data through the EVALIDator API","markdown":{"yaml":{"title":"Using R and Python to get forest resource data through the EVALIDator API","description":"New ways to access FIA estimates through R and Python.","author":"Matt Russell","date":"2023-10-25","slug":[],"categories":["Analytics"],"tags":["forest inventory","forest inventory and analysis","EVALIDator","analytics"],"image":"example_evalid.png"},"headingText":"Using R to access FIA data at the state level","containsRefs":false,"markdown":"\n\n\n![](example_evalid.png){width=500px}\n</center>\nIf you work with forestry data across the United States, you've probably had to turn to Forest Inventory and Analysis (FIA) data at one time or another to look at the status and trends in our forest resources. The FIA database has information contained from over 130,000 forest inventory plots across the country. \n\nOne of the tools that analysts often use to access FIA data is the  [the EVALIDator web interface](https://apps.fs.usda.gov/fiadb-api/evalidator). EVALIDator is a web-based Application Programming Interface (API) that generates population estimates for core forestry metrics. It provides the ability to query FIA information at the state level or a circular retrieval of information around a fixed geographic point.\n\nThere was [an excellent webinar offered in August](https://vimeo.com/861362270/4d996ee479?share=copy) hosted by the FIA National User Group that highlighted some new features available through EVALIDator. For a long while, analysts have used it's web interface to point and click their way to estimating forest resources after selecting the forestry metrics and geographic scale they're interested in. As a long-time EVALIDator user, this was a great way to access FIA data. But dealing with the output in an HTML format and getting it into different software to analyze was always an additional step.\n\nI was happy to learn in the webinar about new ways to directly access FIA estimates through R and Python using the EVALIDator API. For me, this can save time and effort given most of my analyses, graphing, and reporting are done through R. \n\nAll of the documentation for these steps can be found in the [FIADB-API & EVALIDator user documentation](https://apps.fs.usda.gov/fiadb-api/). I'll go through a few examples where I access data from the state of Maine.\n\n  \nThis first example will access the total amount of carbon stored in the live aboveground portions of trees growing on forestland in Maine, measured in metric tonnes. I'll ask for estimates to be provided by forest type group and ownership.\n\nFirst, I'll use R and will load a few packages to access the data: \n\n```{r, message = F, warning = F}\nlibrary(tidyverse)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(rlist)\nlibrary(knitr)\n```\n\nIf you look at the bottom of the [documentation webpage](https://apps.fs.usda.gov/fiadb-api/), you'll see example use cases for extracting FIA estimates using R and Python. There are two examples for each that use GET and POST scripts. The GET scripts allow you to enter a complete URL if you know the attributes you're interested in. The POST script, which I copy here with the `fiadb_api_POST()` function, allows you to directly input the variables you're interested in in R: \n\n```{r}\n# fiadb_api_POST() will accept a FIADB-API full report URL and return data frames\n# See descriptor: https://apps.fs.usda.gov/fiadb-api/\n\nfiadb_api_POST <- function(argList){\n  # make request\n  resp <- POST(url = \"https://apps.fs.usda.gov/fiadb-api/fullreport\", \n               body = argList, \n               encode = \"form\")\n  # parse response from JSON to R list\n  respObj <- content(resp, \"parsed\", encoding = \"ISO-8859-1\")\n  # create empty output list\n  outputList <- list()\n  # add estimates data frame to output list\n  outputList[['estimates']] <- as.data.frame(do.call(rbind,respObj$estimates))\n\n  # if estimate includes totals and subtotals, add those data frames to output list\n  if ('subtotals' %in% names(respObj)){\n    subtotals <- list()\n    # one subtotal data frame for each grouping variable\n    for (i in names(respObj$subtotals)){\n      subtotals[[i]] <- as.data.frame(do.call(rbind,respObj$subtotals[[i]]))\n    }\n    outputList[['subtotals']] <- subtotals\n\n    # totals data frame\n    outputList[['totals']] <- as.data.frame(do.call(rbind,respObj$totals))\n  }\n\n  # add estimate metadata\n  outputList[['metadata']] <- respObj$metadata\n\n  return(outputList)\n}\n```\n\nThe first item to know before accessing FIA data is [the numeric code](https://apps.fs.usda.gov/fiadb-api/fullreport/parameters/snum) corresponding to the variable you're interested in. In my case, this is `snum = 98`, corresponding to the variable that represents \"Forest carbon pool 1: live aboveground, in metric tonnes, on forest land.\" A note of caution: there are *thousands* of variables to choose from, but I suspect the most popular ones are listed toward the top of the page.\n\nThe second item to know is which **wc** code you're interested in. I have no idea why it's abbreviated \"wc\", but it connects the state FIPS code with the 4-digit FIA inventory year. For example, I'm interested in `wc = 232021` to obtain data from Maine's (FIPS code 23) most recent inventory, collected in 2021. You could go back to inventories collected decades ago if you were interested in looking at trends, and [those codes are described here](https://apps.fs.usda.gov/fiadb-api/fullreport/parameters/wc).\n\nFinally, you can use the `rselected` and `cselected` statements to identify the variables you'd like to group by in rows and columns. In our case this is forest type group and ownership group. I'll obtain the data in an NJSON format, but you can also obtain the data in HTML, XML, or other formats. You can specify these parameters in `arg_list` and then store the data in a data frame called `all_rows`. I love how the data are presented in a long and \"tidy\" format:  \n\n```{r}\narg_list_maine <- list(snum = 98,\n               wc = 232021,\n               rselected = 'Forest type group', \n               cselected = 'Ownership group - Major',\n               outputFormat = 'NJSON')\n\n# submit list to POST request function\npost_data_maine <- fiadb_api_POST(arg_list_maine)\n\n# estimate data frame\nall_rows_maine <- post_data_maine[['estimates']]\n\nprint(all_rows_maine)\n```\n\nThis makes the output easy to plot immediately. Here's a graph of the output, where you can see the vast amount of carbon stored on private land in Maine, mostly in the spruce/fir and maple/beech/birch forest type groups:\n\n```{r}\nggplot(all_rows_maine, aes(x = as.character(GRP2), \n                           y = as.numeric(ESTIMATE))) +\n  geom_bar(stat = \"identity\") +\n  facet_wrap(~as.character(GRP1)) +\n  labs(x = \"Ownership\",\n       y = \"Forest carbon (metric tonnes)\")\n```\n\nNote you'll need to play with the names of variables a bit to tidy them up, e.g., turning \"`0001 Public\" to simply \"Public\". But the R functions allow you to quickly obtain the data of interest. You can also grab the subtotals of the output to sum all values within each forest type or ownership category:\n\n```{r}\nsubtotals_maine <- post_data_maine[['subtotals']]\n\nprint(subtotals_maine)\n```\n\nFinally, you can grab the total number that sums all values. In this case, we learn that there's about 374 million metric tonnes of carbon stored in the live aboveground portions of trees in Maine forests:\n\n```{r}\ntotals_maine <- post_data_maine[['totals']]\nprint(totals_maine)\n```\n\n## Using R to access FIA data around a fixed geographic point\n\nA favorite use of EVALIDator by many is the ability to query FIA data around a specific location. For example, a user can generate population estimates for a 50-mile radius around a proposed mill that uses wood.\n\nHere's an example that queries FIA data in a 25-mile radius surrounding Bangor, Maine. It estimates the total forestland area (`snum = 2`) by stand  age class in 20-year increments and stand size class (large-, medium-, or small-diameter trees). The latitude and longitude coordinates are specified in the function:\n\n```{r}\narg_list_bangor <- list(lat = 44.809,\n                        lon = -68.771, \n                        radius = 25,\n                        wc = 232021,\n                        snum = 2,\n                        rselected = 'Stand-size class', \n                        cselected = 'Stand age 20 yr classes (0 to 100 plus)',\n                        outputFormat = 'NJSON')\n\n# submit list to POST request function\npost_data_bangor <- fiadb_api_POST(arg_list_bangor)\n\n# estimate data frame\nall_rows_bangor <- post_data_bangor[['estimates']]\n\nprint(all_rows_bangor)\n```\n\nYou can plot these data directly to visualize the trends within the 25-mile radius:\n\n```{r}\nggplot(all_rows_bangor, aes(x = as.character(GRP2), \n                            y = as.numeric(ESTIMATE),\n                            fill = as.character(GRP1))) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Stand age\",\n       y = \"Forestland area (acres)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n## Conclusion\n\nThe new features available in the EVALIDator API that allow you to access data through R or Python can help to speed up data analysis using FIA data. You can access the entire history of FIA data and analyze forest resources data by state or a circular retrieval from a fixed geographic point. Special thanks to the USDA Forest Service staff that have made this available!  \n\n\n--\n\n*By Matt Russell. [Email Matt](mailto:matt@arbor-analytics.com) with any questions or comments.*","srcMarkdownNoYaml":"\n\n# \n\n![](example_evalid.png){width=500px}\n</center>\n#  \nIf you work with forestry data across the United States, you've probably had to turn to Forest Inventory and Analysis (FIA) data at one time or another to look at the status and trends in our forest resources. The FIA database has information contained from over 130,000 forest inventory plots across the country. \n\nOne of the tools that analysts often use to access FIA data is the  [the EVALIDator web interface](https://apps.fs.usda.gov/fiadb-api/evalidator). EVALIDator is a web-based Application Programming Interface (API) that generates population estimates for core forestry metrics. It provides the ability to query FIA information at the state level or a circular retrieval of information around a fixed geographic point.\n\nThere was [an excellent webinar offered in August](https://vimeo.com/861362270/4d996ee479?share=copy) hosted by the FIA National User Group that highlighted some new features available through EVALIDator. For a long while, analysts have used it's web interface to point and click their way to estimating forest resources after selecting the forestry metrics and geographic scale they're interested in. As a long-time EVALIDator user, this was a great way to access FIA data. But dealing with the output in an HTML format and getting it into different software to analyze was always an additional step.\n\nI was happy to learn in the webinar about new ways to directly access FIA estimates through R and Python using the EVALIDator API. For me, this can save time and effort given most of my analyses, graphing, and reporting are done through R. \n\nAll of the documentation for these steps can be found in the [FIADB-API & EVALIDator user documentation](https://apps.fs.usda.gov/fiadb-api/). I'll go through a few examples where I access data from the state of Maine.\n\n## Using R to access FIA data at the state level\n  \nThis first example will access the total amount of carbon stored in the live aboveground portions of trees growing on forestland in Maine, measured in metric tonnes. I'll ask for estimates to be provided by forest type group and ownership.\n\nFirst, I'll use R and will load a few packages to access the data: \n\n```{r, message = F, warning = F}\nlibrary(tidyverse)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(rlist)\nlibrary(knitr)\n```\n\nIf you look at the bottom of the [documentation webpage](https://apps.fs.usda.gov/fiadb-api/), you'll see example use cases for extracting FIA estimates using R and Python. There are two examples for each that use GET and POST scripts. The GET scripts allow you to enter a complete URL if you know the attributes you're interested in. The POST script, which I copy here with the `fiadb_api_POST()` function, allows you to directly input the variables you're interested in in R: \n\n```{r}\n# fiadb_api_POST() will accept a FIADB-API full report URL and return data frames\n# See descriptor: https://apps.fs.usda.gov/fiadb-api/\n\nfiadb_api_POST <- function(argList){\n  # make request\n  resp <- POST(url = \"https://apps.fs.usda.gov/fiadb-api/fullreport\", \n               body = argList, \n               encode = \"form\")\n  # parse response from JSON to R list\n  respObj <- content(resp, \"parsed\", encoding = \"ISO-8859-1\")\n  # create empty output list\n  outputList <- list()\n  # add estimates data frame to output list\n  outputList[['estimates']] <- as.data.frame(do.call(rbind,respObj$estimates))\n\n  # if estimate includes totals and subtotals, add those data frames to output list\n  if ('subtotals' %in% names(respObj)){\n    subtotals <- list()\n    # one subtotal data frame for each grouping variable\n    for (i in names(respObj$subtotals)){\n      subtotals[[i]] <- as.data.frame(do.call(rbind,respObj$subtotals[[i]]))\n    }\n    outputList[['subtotals']] <- subtotals\n\n    # totals data frame\n    outputList[['totals']] <- as.data.frame(do.call(rbind,respObj$totals))\n  }\n\n  # add estimate metadata\n  outputList[['metadata']] <- respObj$metadata\n\n  return(outputList)\n}\n```\n\nThe first item to know before accessing FIA data is [the numeric code](https://apps.fs.usda.gov/fiadb-api/fullreport/parameters/snum) corresponding to the variable you're interested in. In my case, this is `snum = 98`, corresponding to the variable that represents \"Forest carbon pool 1: live aboveground, in metric tonnes, on forest land.\" A note of caution: there are *thousands* of variables to choose from, but I suspect the most popular ones are listed toward the top of the page.\n\nThe second item to know is which **wc** code you're interested in. I have no idea why it's abbreviated \"wc\", but it connects the state FIPS code with the 4-digit FIA inventory year. For example, I'm interested in `wc = 232021` to obtain data from Maine's (FIPS code 23) most recent inventory, collected in 2021. You could go back to inventories collected decades ago if you were interested in looking at trends, and [those codes are described here](https://apps.fs.usda.gov/fiadb-api/fullreport/parameters/wc).\n\nFinally, you can use the `rselected` and `cselected` statements to identify the variables you'd like to group by in rows and columns. In our case this is forest type group and ownership group. I'll obtain the data in an NJSON format, but you can also obtain the data in HTML, XML, or other formats. You can specify these parameters in `arg_list` and then store the data in a data frame called `all_rows`. I love how the data are presented in a long and \"tidy\" format:  \n\n```{r}\narg_list_maine <- list(snum = 98,\n               wc = 232021,\n               rselected = 'Forest type group', \n               cselected = 'Ownership group - Major',\n               outputFormat = 'NJSON')\n\n# submit list to POST request function\npost_data_maine <- fiadb_api_POST(arg_list_maine)\n\n# estimate data frame\nall_rows_maine <- post_data_maine[['estimates']]\n\nprint(all_rows_maine)\n```\n\nThis makes the output easy to plot immediately. Here's a graph of the output, where you can see the vast amount of carbon stored on private land in Maine, mostly in the spruce/fir and maple/beech/birch forest type groups:\n\n```{r}\nggplot(all_rows_maine, aes(x = as.character(GRP2), \n                           y = as.numeric(ESTIMATE))) +\n  geom_bar(stat = \"identity\") +\n  facet_wrap(~as.character(GRP1)) +\n  labs(x = \"Ownership\",\n       y = \"Forest carbon (metric tonnes)\")\n```\n\nNote you'll need to play with the names of variables a bit to tidy them up, e.g., turning \"`0001 Public\" to simply \"Public\". But the R functions allow you to quickly obtain the data of interest. You can also grab the subtotals of the output to sum all values within each forest type or ownership category:\n\n```{r}\nsubtotals_maine <- post_data_maine[['subtotals']]\n\nprint(subtotals_maine)\n```\n\nFinally, you can grab the total number that sums all values. In this case, we learn that there's about 374 million metric tonnes of carbon stored in the live aboveground portions of trees in Maine forests:\n\n```{r}\ntotals_maine <- post_data_maine[['totals']]\nprint(totals_maine)\n```\n\n## Using R to access FIA data around a fixed geographic point\n\nA favorite use of EVALIDator by many is the ability to query FIA data around a specific location. For example, a user can generate population estimates for a 50-mile radius around a proposed mill that uses wood.\n\nHere's an example that queries FIA data in a 25-mile radius surrounding Bangor, Maine. It estimates the total forestland area (`snum = 2`) by stand  age class in 20-year increments and stand size class (large-, medium-, or small-diameter trees). The latitude and longitude coordinates are specified in the function:\n\n```{r}\narg_list_bangor <- list(lat = 44.809,\n                        lon = -68.771, \n                        radius = 25,\n                        wc = 232021,\n                        snum = 2,\n                        rselected = 'Stand-size class', \n                        cselected = 'Stand age 20 yr classes (0 to 100 plus)',\n                        outputFormat = 'NJSON')\n\n# submit list to POST request function\npost_data_bangor <- fiadb_api_POST(arg_list_bangor)\n\n# estimate data frame\nall_rows_bangor <- post_data_bangor[['estimates']]\n\nprint(all_rows_bangor)\n```\n\nYou can plot these data directly to visualize the trends within the 25-mile radius:\n\n```{r}\nggplot(all_rows_bangor, aes(x = as.character(GRP2), \n                            y = as.numeric(ESTIMATE),\n                            fill = as.character(GRP1))) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Stand age\",\n       y = \"Forestland area (acres)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n## Conclusion\n\nThe new features available in the EVALIDator API that allow you to access data through R or Python can help to speed up data analysis using FIA data. You can access the entire history of FIA data and analyze forest resources data by state or a circular retrieval from a fixed geographic point. Special thanks to the USDA Forest Service staff that have made this available!  \n\n\n--\n\n*By Matt Russell. [Email Matt](mailto:matt@arbor-analytics.com) with any questions or comments.*"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","theme":{"light":"minty","dark":"slate"},"title-block-banner":true,"title":"Using R and Python to get forest resource data through the EVALIDator API","description":"New ways to access FIA estimates through R and Python.","author":"Matt Russell","date":"2023-10-25","slug":[],"categories":["Analytics"],"tags":["forest inventory","forest inventory and analysis","EVALIDator","analytics"],"image":"example_evalid.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}